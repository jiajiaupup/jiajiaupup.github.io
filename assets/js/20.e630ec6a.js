(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{613:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),a("h2",{attrs:{id:"_1-什么是javascipt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是javascipt"}},[t._v("#")]),t._v(" 1. 什么是Javascipt")]),t._v(" "),a("p",[t._v("JavaScript负责页面中的的行为。")]),t._v(" "),a("p",[t._v("它是一门运行在浏览器端的脚本语言。")]),t._v(" "),a("h3",{attrs:{id:"_1-1-js的编写的位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-js的编写的位置"}},[t._v("#")]),t._v(" 1.1 JS的编写的位置")]),t._v(" "),a("p",[t._v("1.可以编写到标签的指定属性中")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onclick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"alert('hello');\"")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("我是按钮"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("a href"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"javascript:alert('aaa');\"")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("超链接"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("2.可以编写到script标签中")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编写js代码  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("3.可以将代码编写到外部的js文件中，然后通过标签将其引入")]),t._v(" "),a("p",[t._v("script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略 ,如果需要则可以在创建一个新的script标签用于编写内部代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"文件路径"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-2-输出语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-输出语句"}},[t._v("#")]),t._v(" 1.2 输出语句")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"要输出的内容"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("该语句会在浏览器窗口中弹出一个警告框")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"要输出的内容"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("该内容将会被写到body标签中，并在页面中显示")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"要输出的内容"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("该内容会被写到开发者工具的控制台中")]),t._v(" "),a("h3",{attrs:{id:"_1-3-基本的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-基本的语法"}},[t._v("#")]),t._v(" 1.3 基本的语法")]),t._v(" "),a("p",[t._v("js函数声明不需要；分号，但是赋值语句要加；分号")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数声明  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("functionName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数表达式  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("注意分号"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("注释")]),t._v(" "),a("p",[t._v("单行注释")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注释内容")]),t._v("\n")])])]),a("p",[t._v("多行注释")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*  \n注释内容  \n*/")]),t._v("\n")])])]),a("p",[t._v("JS严格区分大小写")]),t._v(" "),a("p",[t._v("JS中每条语句以分号(;)结尾如果不写分号，浏览器会自动添加，但是会消耗一些系统资源， 而且有些时候，浏览器会加错分号，所以在开发中分号必须写")]),t._v(" "),a("p",[t._v("JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。")]),t._v(" "),a("h3",{attrs:{id:"_1-4-字面量和变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-字面量和变量"}},[t._v("#")]),t._v(" 1.4 字面量和变量")]),t._v(" "),a("h4",{attrs:{id:"_1-4-1字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1字面量"}},[t._v("#")]),t._v(" 1.4.1字面量")]),t._v(" "),a("p",[t._v("字面量实际上就是一些固定的值，比如 1 2 3 4 true false null NaN “hello”\n"),a("strong",[t._v("字面量都是不可以改变的。")])]),t._v(" "),a("p",[t._v("由于字面量不是很方便使用，所以在JS中很少直接使用字面量")]),t._v(" "),a("h4",{attrs:{id:"_1-4-2变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2变量"}},[t._v("#")]),t._v(" 1.4.2变量")]),t._v(" "),a("p",[t._v("变量可以用来保存字面量，并且可以保存任意的字面量")]),t._v(" "),a("p",[t._v("一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述")]),t._v(" "),a("p",[t._v("声明变量")]),t._v(" "),a("p",[t._v("使用var关键字来声明一个变量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var a;\n")])])]),a("p",[t._v("为变量赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a = 1;\n")])])]),a("p",[t._v("声明和赋值同时进行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var a = 456;\n")])])]),a("h4",{attrs:{id:"_1-4-3标识符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3标识符"}},[t._v("#")]),t._v(" 1.4.3标识符")]),t._v(" "),a("p",[t._v("在JS中所有的可以自主命名的内容，都可以认为是一个标识符，\n是标识符就应该遵守标识符的规范。")]),t._v(" "),a("p",[t._v("比如：变量名、函数名、属性名")]),t._v(" "),a("p",[t._v("规范：\n1.标识符中可以含有字母、数字、_、$\n2.标识符不能以数字开头\n3.标识符不能是JS中的关键字和保留字\n4.标识符一般采用驼峰命名法\nxxxYyyZzz")]),t._v(" "),a("h2",{attrs:{id:"_2-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型"}},[t._v("#")]),t._v(" 2. 数据类型")]),t._v(" "),a("h3",{attrs:{id:"_2-1-基本数据类型与引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基本数据类型与引用数据类型"}},[t._v("#")]),t._v(" 2.1 基本数据类型与引用数据类型")]),t._v(" "),a("h4",{attrs:{id:"_2-1-1-基本数据类型-6种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-基本数据类型-6种"}},[t._v("#")]),t._v(" 2.1.1 基本数据类型：6种")]),t._v(" "),a("p",[t._v("Boolean 布尔值")]),t._v(" "),a("p",[t._v("Number 数值")]),t._v(" "),a("p",[t._v("String 字符串")]),t._v(" "),a("p",[t._v("undefined 未定义")]),t._v(" "),a("p",[t._v("null 空值")]),t._v(" "),a("p",[t._v("（Bigint："),a("code",[t._v("ES2020")]),t._v(" 新增加，是比 "),a("code",[t._v("Number")]),t._v(" 类型的整数范围更大。）")]),t._v(" "),a("p",[t._v("Symbol："),a("code",[t._v("ES6")]),t._v(" 引入的一种新的原始值，表示独一无二的值，主要为了解决属性名冲突问题。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-2-引用数据类型-1种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-引用数据类型-1种"}},[t._v("#")]),t._v(" 2.1.2 引用数据类型：1种")]),t._v(" "),a("p",[t._v("Object对象(包括普通Object、Function、Array、Date、RegExp、Math)")]),t._v(" "),a("h4",{attrs:{id:"_2-1-3-typeof运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-typeof运算符"}},[t._v("#")]),t._v(" 2.1.3 typeof运算符")]),t._v(" "),a("p",[t._v("用来检查一个变量的数据类型\n语法：typeof 变量\n它会返回一个用于描述类型的字符串作为结果**")]),t._v(" "),a("h5",{attrs:{id:"_1-typeof的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-typeof的作用"}},[t._v("#")]),t._v(" （1）"),a("code",[t._v("typeof")]),t._v("的作用？")]),t._v(" "),a("p",[t._v("用于区分数据类型，可以返回7种数据类型："),a("code",[t._v("number、string、boolean、undefined、object、function")]),t._v(" ，以及 "),a("code",[t._v("ES6")]),t._v(" 新增的 "),a("code",[t._v("symbol")])]),t._v(" "),a("h5",{attrs:{id:"_2-typeof-能正确区分数据类型吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-typeof-能正确区分数据类型吗"}},[t._v("#")]),t._v(" （2）"),a("code",[t._v("typeof")]),t._v(" 能正确区分数据类型吗？")]),t._v(" "),a("p",[t._v("不能。对于原始类型，除 "),a("code",[t._v("null")]),t._v(" 都可以正确判断；对于引用类型，除 "),a("code",[t._v("function")]),t._v(" 外，都会返回 "),a("code",[t._v('"object"')]),t._v("。")]),t._v(" "),a("h5",{attrs:{id:"_3-typeof-注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-typeof-注意事项"}},[t._v("#")]),t._v(" （3）"),a("code",[t._v("typeof")]),t._v(" 注意事项")]),t._v(" "),a("ul",[a("li",[t._v("typeof返回值为 "),a("code",[t._v("string")]),t._v(" 格式，注意类似这种考题: "),a("code",[t._v('typeof(typeof(undefined)) -> "string"')])]),t._v(" "),a("li",[t._v('typeof未定义的变量不会报错，返回"undefined"')]),t._v(" "),a("li",[t._v('typeof(null)->"object":遗留已久的bug')]),t._v(" "),a("li",[t._v('typeof无法区别数组与普通对象：typeof（[]）->"object"')]),t._v(" "),a("li",[t._v('typeof(NaN) -> "number"')])]),t._v(" "),a("h5",{attrs:{id:"_4-习题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-习题"}},[t._v("#")]),t._v(" (4)  习题")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b未定义 ，返回undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//number NaN 为number类型")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//number // +a 类型转换为NaN")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//boolean")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//string")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//string // typeof(null) -> "object"; typeof("object") -> "string"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//string")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-1-4-string-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-string-字符串"}},[t._v("#")]),t._v(" 2.1.4  string 字符串")]),t._v(" "),a("p",[t._v("JS中的字符串需要使用引号引起来双引号或单引号都行\n在字符串中使用\\作为转义字符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\\"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  ==> '")]),t._v("  \n\\"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"  ==> "')]),t._v("  \n\\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 换行  \n\\t  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 制表符  \n\\\\  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\\n")])])]),a("h4",{attrs:{id:"_2-1-5-number-数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-number-数值"}},[t._v("#")]),t._v(" 2.1.5 Number 数值")]),t._v(" "),a("p",[a("strong",[t._v("JS中所有的整数和浮点数都是Number类型")])]),t._v(" "),a("p",[t._v("最大能表示的值：Number.MAX_VALUE= 1.7976931348623157e+308")]),t._v(" "),a("p",[t._v("特殊的数字：能赋值给变量\nInfinity 正无穷 a = Infinity ,能赋值\n-Infinity 负无穷\n其他进制的数字的表示：\n0b 开头表示二进制，但是不是所有的浏览器都支持\n0 开头表示八进制\n0x 开头表示十六进制")]),t._v(" "),a("p",[t._v("NaN 非法数字（Not A Number）")]),t._v(" "),a("p",[t._v("使用typeof检查一个Number类型的数据时，会返回”number”\n（包括NaN 和 Infinity）")]),t._v(" "),a("h5",{attrs:{id:"面试题-如何判断一个数是否为nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题-如何判断一个数是否为nan"}},[t._v("#")]),t._v(" 面试题：如何判断一个数是否为NaN？")]),t._v(" "),a("p",[a("code",[t._v("NaN")]),t._v(" 有个非常特殊的特性， "),a("code",[t._v("NaN")]),t._v(" 与任何值都不相等，包括它自身")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("全局函数 "),a("code",[t._v("isNaN")]),t._v(" 方法：不推荐使用。"),a("code",[t._v("MDN")]),t._v(" 对它的介绍是："),a("code",[t._v("isNaN")]),t._v(" 函数内包含一些非常有趣的规则。")]),t._v(" "),a("blockquote",[a("p",[t._v("但为了避免一些面试官出一些冷门题目，咱们来稍微了解一下 "),a("code",[t._v("isNaN")]),t._v(" 的有趣机制：会先判断参数是不是 "),a("code",[t._v("Number")]),t._v(" 类型，如果不是 "),a("code",[t._v("Number")]),t._v(" 类型会尝试将这个参数转换为 "),a("code",[t._v("Number")]),t._v(" 类型，之后再去判断是不是 "),a("code",[t._v("NaN")]),t._v(" 。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为什么对象会带来三种不同的结果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是不是很有趣")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体原因可以参考类型转换篇")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true ")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[a("code",[t._v("isNaN")]),t._v(" 的结果很大程度上取决于 "),a("code",[t._v("Number()")]),t._v(" 类型转换的结果，关于 "),a("code",[t._v("Number")]),t._v(" 的转换结果，后面会专门有一部分来介绍。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Number.isNaN")]),t._v(" (推荐使用)")])]),t._v(" "),a("p",[t._v("与 "),a("code",[t._v("isNaN()")]),t._v(" 相比，"),a("code",[t._v("Number.isNaN()")]),t._v(" 不会自行将参数转换成数字，只有在参数是值为 "),a("code",[t._v("NaN")]),t._v(" 的数字时，才会返回 "),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-6boolean-布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-6boolean-布尔值"}},[t._v("#")]),t._v(" 2.1.6Boolean 布尔值")]),t._v(" "),a("p",[t._v("布尔值主要用来进行逻辑判断，布尔值只有两个\ntrue 逻辑的真\nfalse 逻辑的假\n使用typeof检查一个布尔值时，会返回”boolean”")]),t._v(" "),a("h4",{attrs:{id:"_2-1-7-null-空值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-7-null-空值"}},[t._v("#")]),t._v(" 2.1.7 Null 空值")]),t._v(" "),a("p",[t._v("空值专门用来表示为空的对象，Null类型的值只有一个\nnull\n使用typeof检查一个Null类型的值时会返回”object”")]),t._v(" "),a("h4",{attrs:{id:"_2-1-8-undefined-未定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-8-undefined-未定义"}},[t._v("#")]),t._v(" 2.1.8 Undefined 未定义")]),t._v(" "),a("p",[a("strong",[t._v("如果声明一个变量但是没有为变量赋值此时变量的值就是undefined")])]),t._v(" "),a("p",[t._v("该类型的值只有一个 undefined\n使用typeof检查一个Undefined类型的值时，会返回”undefined”")]),t._v(" "),a("h4",{attrs:{id:"_2-1-9引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-9引用数据类型"}},[t._v("#")]),t._v(" 2.1.9引用数据类型")]),t._v(" "),a("p",[t._v("Object 对象")]),t._v(" "),a("h3",{attrs:{id:"_2-2-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-类型转换"}},[t._v("#")]),t._v(" 2.2  类型转换")]),t._v(" "),a("p",[t._v("类型转换就是指将其他的数据类型，转换为String Number 或 Boolean")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-转换为string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-转换为string"}},[t._v("#")]),t._v(" 2.2.1 转换为String")]),t._v(" "),a("h5",{attrs:{id:"方式一-强制类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式一-强制类型转换"}},[t._v("#")]),t._v(" 方式一（强制类型转换）：")]),t._v(" "),a("p",[a("strong",[t._v("调用被转换数据的toString()方法")]),t._v("\n例子：\nvar a = 123;\na = a.toString();\n注意："),a("strong",[t._v("这个方法不适用于null和undefined")]),t._v("\n由于这两个类型的数据中没有方法，所以调用toString()时会报错")]),t._v(" "),a("h5",{attrs:{id:"面试题-tostring-和-valueof-方法有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题-tostring-和-valueof-方法有什么区别"}},[t._v("#")]),t._v(" 面试题：toString 和 valueOf 方法有什么区别？")]),t._v(" "),a("ol",[a("li",[t._v("基础：这两个方法属于 "),a("code",[t._v("Object")]),t._v(" 对象，是为了解决 "),a("code",[t._v("JavaScript")]),t._v(" 值运算与显示的问题。为了更适合自身功能，很多 "),a("code",[t._v("JavaScript")]),t._v(" 内置对象都重写了这两个方法。")]),t._v(" "),a("li",[a("code",[t._v("toString()")]),t._v(": 返回当前对象的字符串形式；"),a("code",[t._v("valueOf()")]),t._v(" : 返回该对象的原始值")]),t._v(" "),a("li",[t._v("各个类型下两个方法返回值情况对比")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("valueOf")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("toString")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Array[1,2,3]")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组本身[1, 2, 3]")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1,2,3")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对象本身")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("[object Object]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Boolean类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Boolean值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"true"或"false"')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Function")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("函数本身")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("function fnName(){code}")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数值的字符换表示")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Date")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("毫米格式时间戳")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("GMT格式时间字符串")])])])]),t._v(" "),a("p",[t._v("​\t4、调用优先级")]),t._v(" "),a("p",[a("strong",[t._v("隐式转换时会自动调用 "),a("code",[t._v("toString")]),t._v(" 和 "),a("code",[t._v("valueOf")]),t._v(" 方法")]),t._v("，两者优先级如下：")]),t._v(" "),a("ol",[a("li",[a("ul",[a("li",[t._v("强制转化为字符串类型时，优先调用 "),a("code",[t._v("toString")]),t._v(" 方法")]),t._v(" "),a("li",[t._v("强制转换为数值类型时，优先调用 "),a("code",[t._v("valueOf")]),t._v(" 方法")]),t._v(" "),a("li",[t._v("使用运算符操作符情况下，"),a("code",[t._v("valueOf")]),t._v(" 优先级高于 "),a("code",[t._v("toStirng")])]),t._v(" "),a("li",[t._v("对象的类型转换见下一问。")])])])]),t._v(" "),a("h5",{attrs:{id:"方式二-强制类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式二-强制类型转换"}},[t._v("#")]),t._v(" 方式二（强制类型转换）：")]),t._v(" "),a("p",[a("strong",[t._v("调用String()函数")]),t._v("\n例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("原理："),a("strong",[t._v("对于Number Boolean String都会调用他们的toString()方法来将其转换为字符串，对于null值，直接转换为字符串”null”。对于undefined直接转换为字符串”undefined”")])]),t._v(" "),a("h5",{attrs:{id:"方式三-隐式的类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式三-隐式的类型转换"}},[t._v("#")]),t._v(" 方式三（隐式的类型转换）:")]),t._v(" "),a("p",[a("strong",[t._v("为任意的数据类型 +””")]),t._v("\n例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("原理：和String()函数一样")]),t._v(" "),a("h3",{attrs:{id:"_2-2-2-转换为number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-转换为number"}},[t._v("#")]),t._v(" 2.2.2 转换为Number")]),t._v(" "),a("h5",{attrs:{id:"方式一-强制类型转换-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式一-强制类型转换-2"}},[t._v("#")]),t._v(" 方式一（强制类型转换）：")]),t._v(" "),a("p",[a("strong",[t._v("调用Number()函数")]),t._v("\n例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("转换的情况：")]),t._v(" "),a("ol",[a("li",[t._v("字符串 > 数字\n如果字符串是一个合法的数字，则直接转换为对应的数字\n如果字符串是一个非法的数字，则转换为NaN\n如果是一个空串或纯空格的字符串，则转换为0")]),t._v(" "),a("li",[t._v("布尔值 > 数字\ntrue转换为1\nfalse转换为0")]),t._v(" "),a("li",[t._v("空值 > 数字\nnull转换为0")]),t._v(" "),a("li",[t._v("未定义 > 数字\nundefined 转换为NaN")])]),t._v(" "),a("h5",{attrs:{id:"方式二-强制类型转换-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式二-强制类型转换-2"}},[t._v("#")]),t._v(" 方式二（强制类型转换）：")]),t._v(" "),a("p",[t._v("调用parseInt()或parseFloat()\n这两个函数专门用来将一个字符串转换为数字的")]),t._v(" "),a("p",[t._v("如果对非String使用parseInt()或parseFloat()，它会"),a("strong",[t._v("先将其转换为String")]),t._v("然后在操作 parseInt()\n可以将"),a("strong",[t._v("一个字符串中的有效的整数位")]),t._v("提取出来，并转换为Number\n例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var a = "123.456px";  \na = parseInt(a); //123\n')])])]),a("p",[t._v("如果需要可以在parseInt()中指定一个第二个参数，来指定进制parseFloat()可以将一个"),a("strong",[t._v("字符串中的有效的小数位")]),t._v("提取出来，并转换为Number\n例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var a = "123.456px";  \na = parseFloat(a); //123.456\n')])])]),a("h5",{attrs:{id:"方式三-隐式的类型转换-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式三-隐式的类型转换-2"}},[t._v("#")]),t._v(" 方式三（隐式的类型转换）：")]),t._v(" "),a("p",[t._v("使用一元的+来进行隐式的类型转换\n例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var a = "123";  \na = +a;\n')])])]),a("p",[a("strong",[t._v("原理：和Number()函数一样")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-3转换为boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3转换为boolean"}},[t._v("#")]),t._v(" 2.2.3转换为Boolean")]),t._v(" "),a("h5",{attrs:{id:"方式一-强制类型转换-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式一-强制类型转换-3"}},[t._v("#")]),t._v(" 方式一（强制类型转换）：")]),t._v(" "),a("p",[t._v("使用Boolean()函数\n例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("p",[t._v("转换的情况\n字符串 > 布尔\n除了空串其余全是true")]),t._v(" "),a("p",[t._v("数值 > 布尔\n除了0和NaN其余的全是true")]),t._v(" "),a("p",[t._v("null、undefined > 布尔\n都是false")]),t._v(" "),a("p",[t._v("对象 > 布尔\n都是true")]),t._v(" "),a("h5",{attrs:{id:"方式二-隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式二-隐式类型转换"}},[t._v("#")]),t._v(" 方式二（隐式类型转换）：")]),t._v(" "),a("p",[a("strong",[t._v("为任意的数据类型做两次非运算，即可将其转换为布尔值")]),t._v("\n例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-基础语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-基础语法"}},[t._v("#")]),t._v(" 3. 基础语法")]),t._v(" "),a("h3",{attrs:{id:"_3-1-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-运算符"}},[t._v("#")]),t._v(" 3.1  运算符")]),t._v(" "),a("p",[t._v("运算符也称为操作符\n通过运算符可以对一个或多个值进行运算或操作")]),t._v(" "),a("h4",{attrs:{id:"_3-1-1-算数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-算数运算符"}},[t._v("#")]),t._v(" 3.1.1 算数运算符")]),t._v(" "),a("p",[t._v("+ '+' 对两个值进行加法运算并返回结果\n+ \"-\" 对两个值进行减法运算并返回结果\n+  * 对两个值进行乘法运算并返回结果\n+ / 对两个值进行除法运算并返回结果\n+ % 对两个值进行取余运算并返回结果")]),t._v(" "),a("p",[a("strong",[t._v("除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。")]),t._v("\n而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。\n任何值和字符串做加法，都会先转换为字符串，然后再拼串")]),t._v(" "),a("h5",{attrs:{id:"_3-1-2-一元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-一元运算符"}},[t._v("#")]),t._v(" 3.1.2 一元运算符")]),t._v(" "),a("p",[t._v("一元运算符只需要一个操作数")]),t._v(" "),a("h5",{attrs:{id:"_3-1-2-1-一元的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-1-一元的"}},[t._v("#")]),t._v(" 3.1.2.1 一元的+")]),t._v(" "),a("p",[t._v("就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字\n例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"_3-1-2-2-一元的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-2-一元的"}},[t._v("#")]),t._v(" 3.1.2.2 一元的-")]),t._v(" "),a("p",[t._v("就是负号，可以对一个数字进行符号位取反\n例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"_3-1-2-3-自增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-3-自增"}},[t._v("#")]),t._v(" 3.1.2.3 自增")]),t._v(" "),a("p",[t._v("自增可以使变量在原值的基础上自增1\n自增使用 ++\n自增可以使用 前++（++a）后++(a++)\n无论是++a 还是 a++都会立即使原变量自增1\n不同的是++a和a++的值是不同的，\n++a的值是变量的新值（自增后的值）\na++的值是变量的原值（自增前的值）")]),t._v(" "),a("h5",{attrs:{id:"_3-1-2-4-自减"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-4-自减"}},[t._v("#")]),t._v(" 3.1.2.4 自减")]),t._v(" "),a("p",[t._v("自减可以使变量在原值的基础上自减1\n自减使用\n自减可以使用 前（a）后(a)\n无论是a 还是 a都会立即使原变量自减1\n不同的是a和a的值是不同的，\na的值是变量的新值（自减后的值）\na的值是变量的原值（自减前的值）")]),t._v(" "),a("h4",{attrs:{id:"_3-1-3-逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-逻辑运算符"}},[t._v("#")]),t._v(" 3.1.3 逻辑运算符")]),t._v(" "),a("p",[t._v("!\n非运算可以对一个布尔值进行取反，true变false false边true\n当对非布尔值使用!时，会先将其转换为布尔值然后再取反\n我们可以利用!来将其他的数据类型转换为布尔值")]),t._v(" "),a("p",[t._v("&&\n&&可以对符号两侧的值进行与运算\n只有两端的值都为true时，才会返回true。只要有一个false就会返回false。\n与是一个短路的与，如果第一个值是false，则不再检查第二个值\n对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值\n规则：\n1.如果第一个值为false，则返回第一个值\n2.如果第一个值为true，则返回第二个值")]),t._v(" "),a("p",[t._v("||\n||可以对符号两侧的值进行或运算\n只有两端都是false时，才会返回false。只要有一个true，就会返回true。\n或是一个短路的或，如果第一个值是true，则不再检查第二个值\n对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值\n规则：\n1.如果第一个值为true，则返回第一个值\n2.如果第一个值为false，则返回第二个值")]),t._v(" "),a("h4",{attrs:{id:"_3-1-4-赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-赋值运算符"}},[t._v("#")]),t._v(" 3.1.4 赋值运算符")]),t._v(" "),a("p",[t._v("=\n可以将符号右侧的值赋值给左侧变量\n+=")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" 相当于 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("-=")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  相当于 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("*=")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" 相当于 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("/=")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" 相当于 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("%=")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" 相当于 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-1-5-关系运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-关系运算符"}},[t._v("#")]),t._v(" 3.1.5 关系运算符")]),t._v(" "),a("p",[t._v("关系运算符用来比较两个值之间的大小关系的\n>\n>=\n<\n<=\n关系运算符的规则和数学中一致，用来比较两个值之间的关系，\n如果关系成立则返回true，关系不成立则返回false。\n如果比较的两个值是非数值，会将其转换为Number然后再比较。\n如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。")]),t._v(" "),a("h4",{attrs:{id:"_3-1-6-相等运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-6-相等运算符"}},[t._v("#")]),t._v(" 3.1.6 相等运算符")]),t._v(" "),a("p",[t._v("相等，判断左右两个值是否相等，如果相等返回true，如果不等返回false\n相等会自动对两个值进行类型转换，如果"),a("strong",[t._v("对不同的类型进行比较，会将其转换为相同的类型然后再比较")]),t._v("，转换后相等它也会返回true，null == undifined")]),t._v(" "),a("p",[t._v("!=\n不等，判断左右两个值是否不等，如果不等则返回true，如果相等则返回false\n不等也会做自动的类型转换。")]),t._v(" "),a("p",[a("strong",[t._v("===")]),t._v(" "),a("strong",[t._v("全等")]),t._v("，判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，\n如果两个值的类型不同，则直接返回false")]),t._v(" "),a("p",[t._v("!==\n"),a("strong",[t._v("不全等")]),t._v("，和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true")]),t._v(" "),a("p",[t._v("特殊的值：\nnull和undefined\n由于undefined衍生自null，所以"),a("strong",[t._v("null == undefined")]),t._v(" 会返回true。\n但是 null === undefined 会返回false。\n"),a("strong",[t._v("NaN")]),t._v("\nNaN不与任何值相等，报告它自身 NaN == NaN //false")]),t._v(" "),a("p",[t._v("判断一个值是否是NaN\n使用isNaN()函数")]),t._v(" "),a("h4",{attrs:{id:"_3-1-7-三元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-7-三元运算符"}},[t._v("#")]),t._v(" 3.1.7 三元运算符：")]),t._v(" "),a("p",[t._v("?:\n语法：条件表达式?语句1:语句2;\n执行流程：\n先对条件表达式求值判断，\n如果判断结果为true，则执行语句1，并返回执行结果\n如果判断结果为false，则执行语句2，并返回执行结果")]),t._v(" "),a("p",[t._v("优先级：\n和数学中一样，JS中的运算符也是具有优先级的，\n比如 先乘除 后加减 先与 后或\n具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，\n优先级越高的越优先计算，优先级相同的，从左往右计算。\n优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-流程控制语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-流程控制语句"}},[t._v("#")]),t._v(" 3.2 流程控制语句")]),t._v(" "),a("p",[t._v("程序都是自上向下的顺序执行的，\n通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。")]),t._v(" "),a("h4",{attrs:{id:"_3-2-1条件分支语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1条件分支语句"}},[t._v("#")]),t._v(" 3.2.1条件分支语句")]),t._v(" "),a("p",[t._v("条件判断语句也称为if语句\n语法一：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("执行流程：  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("语句执行时，会先对条件表达式进行求值判断，  \n如果值为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，则执行"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("后的语句  \n如果值为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("，则不执行\n")])])]),a("p",[t._v("语法二：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("执行流程：  \nif...else语句执行时，会对条件表达式进行求值判断，  \n\t如果值为true，则执行if后的语句  \n\t如果值为false，则执行else后的语句\n")])])]),a("p",[t._v("语法三：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("执行流程  \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("语句执行时，会自上至下依次对条件表达式进行求值判断，  \n\t如果判断结果为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，则执行当前"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("后的语句，执行完成后语句结束。  \n\t如果判断结果为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("，则继续向下判断，直到找到为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("的为止。  \n\t如果所有的条件表达式都是"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("，则执行"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("后的语句\n")])])]),a("p",[t._v("1.条件分支语句\nswitch语句\n语法:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("表达式")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n\t\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("表达式")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n\t\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("表达式")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n\t\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  \n\t\t语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("执行流程：\nswitch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，\n如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。\n如果所有的case判断结果都为false，则从default处开始执行代码。")]),t._v(" "),a("h4",{attrs:{id:"_3-2-2-循环语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-循环语句"}},[t._v("#")]),t._v(" 3.2.2 循环语句")]),t._v(" "),a("p",[t._v("通过循环语句可以反复执行某些语句多次\nwhile循环\n语法：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("执行流程：\nwhile语句在执行时，会先对条件表达式进行求值判断，\n如果判断结果为false，则终止循环\n如果判断结果为true，则执行循环体\n循环体执行完毕，继续对条件表达式进行求值判断，依此类推")]),t._v(" "),a("p",[t._v("do…while循环\n语法:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("执行流程\ndo…while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，\n如果判断判断结果为false，则终止循环。\n如果判断结果为true，则继续执行循环体，依此类推")]),t._v(" "),a("p",[t._v("和while的区别：\nwhile：先判断后执行\ndo…while: 先执行后判断\ndo…while可以确保循环体至少执行一次。")]),t._v(" "),a("p",[t._v("for循环\n语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for(①初始化表达式 ; ②条件表达式 ; ④更新表达式){  \n    ③语句...  \n}\n")])])]),a("p",[t._v("执行流程：\n首先执行①初始化表达式，初始化一个变量，\n然后对②条件表达式进行求值判断，如果为false则终止循环\n如果判断结果为true，则执行③循环体\n循环体执行完毕，执行④更新表达式，对变量进行更新。\n更新表达式执行完毕重复②")]),t._v(" "),a("p",[t._v("死循环")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_4-对象-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-对象-object"}},[t._v("#")]),t._v(" 4. 对象（Object）")]),t._v(" "),a("p",[t._v("对象是JS中的引用数据类型\n"),a("strong",[t._v("对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性")]),t._v("\n使用typeof检查一个对象时，会返回object")]),t._v(" "),a("h3",{attrs:{id:"_4-1-对象的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-对象的分类"}},[t._v("#")]),t._v(" 4.1 对象的分类")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("宿主对象（Host Objects）：由JavaScript宿主环境提供的对象，它们的行为完全由宿主环境来决定。目前来讲主要指由浏览器提供的对象,比如 BOM DOM。")])]),t._v(" "),a("li",[a("p",[t._v("内置对象（Build-in Objects）：由JavaScript语言提供的对象。")]),t._v(" "),a("ul",[a("li",[t._v("由ES标准中定义的对象，在任何的ES的实现中都可以使用\n- 比如：Math String Number Boolean Function Object….")])])]),t._v(" "),a("li",[a("p",[t._v("自定义对象 :- 由开发人员自己创建的对象")])])]),t._v(" "),a("p",[a("strong",[t._v("创建对象")])]),t._v(" "),a("p",[t._v("方式一：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("方式二：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("向对象中添加属性")]),t._v("\n语法：\n对象.属性名 = 属性值;\n"),a("strong",[t._v("对象[“属性名”] = 属性值;")]),t._v(" //这种方式能够使用特殊的属性名")]),t._v(" "),a("p",[a("strong",[t._v("对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。")]),t._v("\n属性值也可以任意的数据类型。")]),t._v(" "),a("p",[t._v("读取对象中的属性\n语法：\n对象.属性名\n对象[“属性名”] //“属性名”可以使字符串常量，也可以是字符串变量\n如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined")]),t._v(" "),a("p",[a("strong",[t._v("删除对象中的属性")]),t._v("\n语法：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" 对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("属性名  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" 对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"属性名"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-2-遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-遍历"}},[t._v("#")]),t._v(" 4.2 遍历")]),t._v(" "),a("h4",{attrs:{id:"_4-2-1-使用in检查对象中是否含有指定属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-使用in检查对象中是否含有指定属性"}},[t._v("#")]),t._v(" 4.2.1 "),a("strong",[t._v("使用in检查对象中是否含有指定属性")])]),t._v(" "),a("p",[t._v("语法：”属性名” in 对象\n如果在对象中含有该属性，则返回true\n如果没有则返回false")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("循环遍历对象自身的和继承的可枚举属性")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("不含Symbol属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'2'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('":"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_4-2-2-使用对象字面量-在创建对象时直接向对象中添加属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-使用对象字面量-在创建对象时直接向对象中添加属性"}},[t._v("#")]),t._v(" 4.2.2 "),a("strong",[t._v("使用对象字面量，在创建对象时直接向对象中添加属性")])]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("属性名")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("属性值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("属性名")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("属性值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("属性名")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("属性值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("属性名")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("属性值  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("基本数据类型和引用数据类型\n基本数据类型\nString Number Boolean Null Undefined\n引用数据类型\nObject\n"),a("strong",[t._v("基本数据类型的数据，变量是直接保存的它的值。")]),t._v("\n变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。\n"),a("strong",[t._v("引用数据类型的数据，变量是保存的对象的引用（内存地址）。")]),t._v("\n如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。\n比较两个变量时，对于基本数据类型，比较的就是值，\n对于引用数据类型比较的是地址，地址相同才相同")]),t._v(" "),a("h2",{attrs:{id:"_5-函数-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数-function"}},[t._v("#")]),t._v(" 5. 函数（Function）")]),t._v(" "),a("h3",{attrs:{id:"_5-1-什么是函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-什么是函数"}},[t._v("#")]),t._v(" 5.1 什么是函数")]),t._v(" "),a("p",[a("strong",[t._v("函数也是一个对象，也具有普通对象的功能（能有属性）")]),t._v("\n函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码\n使用typeof检查一个函数时会返回function")]),t._v(" "),a("p",[t._v("创建函数\n函数声明")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("函数名")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("形参"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("形参"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("形参"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("函数表达式")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("函数名")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("形参"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("形参"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("形参"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n语句"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("调用函数\n语法：函数对象([实参1,实参2…实参N]);\nfun() sum() alert() Number() parseInt()\n当我们调用函数时，函数中封装的代码会按照编写的顺序执行")]),t._v(" "),a("h3",{attrs:{id:"_5-2-立即执行函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-立即执行函数"}},[t._v("#")]),t._v(" 5.2 "),a("strong",[t._v("立即执行函数")])]),t._v(" "),a("p",[t._v("函数定义完，立即被调用，这种函数叫做立即执行函数\n立即执行函数往往只会执行一次")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a = "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b = "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("遍历对象")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"property：name ="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<br/>"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-3-形参和实参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-形参和实参"}},[t._v("#")]),t._v(" 5.3 形参和实参")]),t._v(" "),a("p",[t._v("形参：形式参数\n定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开\n定义形参就相当于在函数内声明了对应的变量但是并不赋值，\n形参会在调用时才赋值。")]),t._v(" "),a("p",[t._v("实参：实际参数\n调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,\n调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。\n"),a("strong",[t._v("如果实参的数量大于形参，多余实参将不会赋值，")]),t._v(" "),a("strong",[t._v("如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined")])]),t._v(" "),a("p",[a("strong",[t._v("返回值，就是函数执行的结果。")]),t._v("\n使用return 来设置函数的返回值。\n语法：return 值;\n该值就会成为函数的返回值，可以通过一个变量来接收返回值\nreturn后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。\nreturn后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。\n"),a("strong",[t._v("如果return后不跟值，或者是不写return则函数默认返回undefined。")])]),t._v(" "),a("h3",{attrs:{id:"_5-4-break、continue和return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-break、continue和return"}},[t._v("#")]),t._v(" 5.4 "),a("strong",[t._v("break、continue和return")])]),t._v(" "),a("p",[t._v("break\n退出循环\ncontinue\n跳过当次循环\nreturn\n退出函数")]),t._v(" "),a("p",[a("strong",[t._v("参数，函数的实参也可以是任意的数据类型。")])]),t._v(" "),a("h3",{attrs:{id:"_5-5-方法-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-方法-method"}},[t._v("#")]),t._v(" 5.5 "),a("strong",[t._v("方法（method）")])]),t._v(" "),a("p",[t._v("可以将一个函数设置为一个对象的属性，\n当一个对象的属性是一个函数时，\n我们称这个函数是该对象的方法。\n对象.方法名();\n函数名()")]),t._v(" "),a("h3",{attrs:{id:"_5-6-函数的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-函数的属性和方法"}},[t._v("#")]),t._v(" 5.6 函数的属性和方法")]),t._v(" "),a("h4",{attrs:{id:"_5-6-1-call-和apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-1-call-和apply"}},[t._v("#")]),t._v(" 5.6.1 call()和apply()")]),t._v(" "),a("p",[t._v("call()\napply()\n"),a("strong",[t._v("这两个方法都是函数对象的方法需要通过函数对象来调用")]),t._v("\n通过两个方法可以直接调用函数，并且"),a("strong",[t._v("可以通过第一个实参来指定函数中this")]),t._v("\n不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递")]),t._v(" "),a("h4",{attrs:{id:"_5-6-2-arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-2-arguments"}},[t._v("#")]),t._v(" 5.6.2 "),a("strong",[t._v("arguments")])]),t._v(" "),a("p",[t._v("arguments和this类似，都是函数中的隐含的参数\narguments是一个类数组元素，它用来封装函数执行过程中的实参\n所以即使不定义形参，也可以通过arguments来使用实参\n"),a("strong",[t._v("arguments中有一个属性callee表示当前执行的函数对象")])]),t._v(" "),a("h4",{attrs:{id:"_5-6-3-this-调用函数的那个对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-3-this-调用函数的那个对象"}},[t._v("#")]),t._v(" 5.6.3 this（调用函数的那个对象）")]),t._v(" "),a("p",[t._v("this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象\n1.以函数的形式调用时，this是window\n2.以方法的形式调用时，this是调用方法的对象\n3.以构造函数的形式调用时，this是新建的那个对象\n4.使用call和apply调用时，this是指定的那个对象\n5.在全局作用域中this代表window")]),t._v(" "),a("h3",{attrs:{id:"_5-7-作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-作用域"}},[t._v("#")]),t._v(" 5.7  作用域")]),t._v(" "),a("p",[t._v("作用域简单来说就是一个变量的作用范围。\n在JS中作用域分成两种：")]),t._v(" "),a("h4",{attrs:{id:"_5-7-1-全局作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-1-全局作用域"}},[t._v("#")]),t._v(" 5.7.1.全局作用域")]),t._v(" "),a("p",[t._v("直接在script标签中编写的代码都运行在全局作用域中\n"),a("strong",[t._v("全局作用域在打开页面时创建，在页面关闭时销毁。")]),t._v("\n全局作用域中有一个全局对象window，window对象由浏览器提供，\n可以在页面中直接使用，它代表的是整个的浏览器的窗口。\n"),a("strong",[t._v("在全局作用域中创建的变量都会作为window对象的属性保存")]),t._v("\n在全局作用域中创建的函数都会作为window对象的方法保存\n在全局作用域中创建的变量和函数可以在页面的任意位置访问。\n在函数作用域中也可以访问到全局作用域的变量。\n尽量不要在全局中创建变量")]),t._v(" "),a("h4",{attrs:{id:"_5-7-2-函数作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-2-函数作用域"}},[t._v("#")]),t._v(" 5.7.2 函数作用域")]),t._v(" "),a("p",[t._v("函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。\n函数作用域在函数执行时创建，在函数执行结束时销毁。\n在函数作用域中创建的变量，不能在全局中访问。\n当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，\n如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，\n如果找到了则使用，找不到则继续向上找，一直会")]),t._v(" "),a("h4",{attrs:{id:"_5-7-3-变量的声明提前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-3-变量的声明提前"}},[t._v("#")]),t._v(" 5.7.3 "),a("strong",[t._v("变量的声明提前")])]),t._v(" "),a("p",[t._v("在全局作用域中，使用"),a("strong",[t._v("var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。")]),t._v("\n所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。\n在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，\n如果没有使用var关键字声明变量，则变量会变成全局变量")]),t._v(" "),a("h4",{attrs:{id:"_5-7-4-函数的声明提前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-4-函数的声明提前"}},[t._v("#")]),t._v(" 5.7.4 "),a("strong",[t._v("函数的声明提前")])]),t._v(" "),a("p",[t._v("在全局作用域中，使用"),a("strong",[t._v("函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建")]),t._v("，\n也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun = function(){})创建的函数没有该特性\n在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。")]),t._v(" "),a("h3",{attrs:{id:"_5-8-this-上下文对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-this-上下文对象"}},[t._v("#")]),t._v(" 5.8  this（上下文对象）")]),t._v(" "),a("p",[t._v("我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。\n使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。")]),t._v(" "),a("p",[t._v("指向当前对象")]),t._v(" "),a("p",[t._v("this的不同的情况：\n1.以函数的形式调用时，this是window\n2.以方法的形式调用时，this就是调用方法的对象\n3.以构造函数的形式调用时，this就是新创建的对象")]),t._v(" "),a("h3",{attrs:{id:"_5-9-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-构造函数"}},[t._v("#")]),t._v(" 5.9 构造函数")]),t._v(" "),a("p",[t._v("构造函数是专门用来创建对象的函数\n"),a("strong",[t._v("一个构造函数我们也可以称为一个类")]),t._v("\n通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例\n通过同一个构造函数创建的对象，我们称为一类对象\n构造函数就是一个普通的函数，只是他的调用方式不同，\n如果直接调用，它就是一个普通函数\n如果使用new来调用，则它就是一个构造函数")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gender")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayName")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("构造函数的执行流程：\n1.创建一个新的对象\n2.将新的对象作为函数的上下文对象（this）\n3.执行函数中的代码\n4.将新建的对象返回")]),t._v(" "),a("h4",{attrs:{id:"_5-9-1-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-1-instanceof"}},[t._v("#")]),t._v(" 5.9.1 instanceof")]),t._v(" "),a("p",[a("strong",[t._v("instanceof 用来检查一个对象是否是一个类的实例")]),t._v("\n语法：对象 instanceof 构造函数\n如果该对象时构造函数的实例，则返回true，否则返回false\n"),a("strong",[t._v("Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true")])]),t._v(" "),a("h4",{attrs:{id:"_5-9-2-枚举对象中的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-2-枚举对象中的属性"}},[t._v("#")]),t._v(" 5.9.2 枚举对象中的属性")]),t._v(" "),a("h5",{attrs:{id:"_1-for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-for-in"}},[t._v("#")]),t._v(" 1. for…in")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 属性名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("for…in语句的循环体会执行多次，对象中有几个属性就会执行几次，\n每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性。")]),t._v(" "),a("p",[t._v("for in 遍历的是数组的索引")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for in")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a b c")]),t._v("\n")])])]),a("p",[a("code",[t._v("for in")]),t._v("更适合遍历对象，当然也可以遍历数组，但是会存在一些问题，")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("p",[a("code",[t._v("index")]),t._v("索引为字符串型数字，不能直接进行几何运算")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 01 11 21")]),t._v("\n")])])]),a("h5",{attrs:{id:"_2-for-of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-for-of"}},[t._v("#")]),t._v(" 2. for...of")]),t._v(" "),a("p",[a("code",[t._v("for of")]),t._v("遍历的是数组元素值，而且"),a("code",[t._v("for of")]),t._v("遍历的只是数组内的元素，不包括原型属性和索引")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//for of")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" array1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" array1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a b c")]),t._v("\n")])])]),a("h5",{attrs:{id:"_3-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结"}},[t._v("#")]),t._v(" 3.小结")]),t._v(" "),a("p",[a("code",[t._v("for in")]),t._v("遍历的是数组的索引（即键名），而"),a("code",[t._v("for of")]),t._v("遍历的是数组元素值")]),t._v(" "),a("p",[a("code",[t._v("for in")]),t._v("总是得到对象的"),a("code",[t._v("key")]),t._v("或数组、字符串的下标")]),t._v(" "),a("p",[a("code",[t._v("for of")]),t._v("总是得到对象的"),a("code",[t._v("value")]),t._v("或数组、字符串的值")]),t._v(" "),a("h3",{attrs:{id:"_5-10原型-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-10原型-prototype"}},[t._v("#")]),t._v(" 5.10原型（prototype）")]),t._v(" "),a("p",[t._v("创建一个函数以后，"),a("strong",[t._v("解析器都会默认在函数中添加一个数prototype")]),t._v("\nprototype属性指向的是一个对象，这个对象我们称为原型对象。\n当函数作为构造函数使用，"),a("strong",[t._v("它所创建的对象中都会有一个隐含的属性执行该原型对象。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("这个隐含的属性可以通过对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__来访问。\n")])])]),a("p",[a("strong",[t._v("原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。")]),t._v("\n我们可以将对象中共有的属性和方法统一添加到原型对象中，\n这样我们只需要添加一次，就可以使所有的对象都可以使用。\n当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，\n如果在自身中找到了，则直接使用。\n如果没有找到，则去原型对象中寻找，如果找到了则使用，\n"),a("strong",[t._v("如果没有找到，则去原型的原型中寻找，"),a("strong",[t._v("依此类推。直到找到Object的原型为止，Object的原型的原型为null，\n如果依然没有找到则返回undefined\n"),a("strong",[t._v("hasOwnProperty()")]),t._v("\n这个方法可以用来检查")]),t._v("对象自身中")]),t._v("是否含有某个属性\n语法：对象.hasOwnProperty(“属性名”)")]),t._v(" "),a("h3",{attrs:{id:"_6-input-输入框的事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-input-输入框的事件"}},[t._v("#")]),t._v(" 6. input 输入框的事件")]),t._v(" "),a("p",[t._v("从input框获取焦点，输入内容（值），失去焦点整个过程的事件一共有一下的几个：")]),t._v(" "),a("p",[a("code",[t._v("onfocus -> 键盘输入 -> onkeydown -> onkeypress -> onkeyup -> oninput -> 失去焦点 -> onchange -> onblur")])]),t._v(" "),a("p",[a("strong",[t._v("==onchange 事件并不是每次输入框值改变的时候触发的，而是在失去焦点时候，并且在 onblur 之前触发；oninput则是改变时时触发==")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("label "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"testInput"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("用户名："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("label"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"testInput"')]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),t._v(" onfocus"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"handleFocus(event)"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这种方式必须传参数event")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleFocus")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//onfocus事件 value=张三 keyCode=undefined")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onfocus事件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keyCode='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"testInput"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这种方式可以不写event")]),t._v("\n  input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onkeydown")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onkeydown事件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keyCode='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onkeypress")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onkeypress事件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keyCode='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里获取到value要加上摁下之后的了")]),t._v("\n  input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onkeyup")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onkeyup事件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keyCode='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n  * 当用户向 <input> 中尝试输入时触发\n  * 该事件在 <input> 或 <textarea> 元素的值发生改变时触发。\n  * 该事件类似于 onchange 事件。不同之处在于 oninput 事件在元素值发生变化是立即触发， onchange 在元素失去焦点时触发。\n  * 另外一点不同是 onchange 事件也可以作用于 <keygen> 和 <select> 元素。\n  \n  \t什么是keygen？\n  \t作用：规定用于表单的密钥对生成器字段。\n\t说明：当提交表单时，私钥存储在本地，公钥发送到服务器。\n  \n  * oninput 事件是 IE 之外的大多数浏览器支持的事件，在 value 改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过 js 改变 value 时，却不会触发。\n  * oninput 事件失效情况：a). 当脚本中改变 value 时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。\n  * */")]),t._v("\n  input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("oninput")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'oninput事件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keyCode='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//onchange 事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发。")]),t._v("\n  input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onchange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onchange事件...'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keyCode='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onblur")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onblur事件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keyCode='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("2、说说这些事件")]),t._v(" "),a("p",[t._v("onfocus")]),t._v(" "),a("p",[t._v("并没有什么特别的，就是当焦点转移到（点击，tab切换） input 框上边的时候触发；")]),t._v(" "),a("p",[t._v("onkeydown")]),t._v(" "),a("p",[t._v("键盘按下的时候触发，但是此时按下的值并没有被输入到 input ，所以，此时的 value 没有值，或者说它的值 只能是之前的旧值")]),t._v(" "),a("p",[t._v("另外，此时可以阻止按键的默认事件；")]),t._v(" "),a("p",[t._v("onkeypress")]),t._v(" "),a("p",[t._v("按键在按下之后，并且是按键松开之前触发的；")]),t._v(" "),a("p",[t._v("和 keydown 一样不能获取新的到 value；此时，也可以阻止按键的默认事件；")]),t._v(" "),a("p",[t._v("但是这个事件对一下按键的支持不好，一些非输入性质的按键（如；delete, backspare）不支持；（除enter）；")]),t._v(" "),a("p",[t._v("oninput")]),t._v(" "),a("p",[t._v("这个事件很贼，它的触发时机，从上面就可以看到，onpress 之后 onkeyup 之前；")]),t._v(" "),a("p",[t._v("此时，已经可以拿到 value，不能拿到keycode，不可以阻止默认事件了 ；")]),t._v(" "),a("p",[t._v("关键是这货明明是每次输入框的值变化时候出发的，抢了onchange 的饭碗；")]),t._v(" "),a("p",[t._v("另外，这东西是新的，IE9以下不支持，需要使用 onpropertychange；")]),t._v(" "),a("p",[t._v("还有这货，仅仅在input， textarea 支持；")]),t._v(" "),a("p",[t._v("onkeyup")]),t._v(" "),a("p",[t._v("按键在松开之后触发的；")]),t._v(" "),a("p",[t._v("能获取新的到 value，keycode；此时，不可以阻止按键的默认事件；")]),t._v(" "),a("p",[t._v("onchange")]),t._v(" "),a("p",[t._v("你敢说这是你认识的onchange吗？反正我是不敢；在失去焦点之后触发的，明明是 onchange 为什么是在失去焦点后触发的，还偏偏比 onblur 快；")]),t._v(" "),a("p",[t._v("能获取新的到 value，不能拿到 keycode；此时，不可以阻止按键的默认事件；")]),t._v(" "),a("p",[a("code",[t._v("onblur")])]),t._v(" "),a("p",[t._v("失去焦点时候触发，但是还是比 onchange 慢了；")]),t._v(" "),a("p",[t._v("能获取新的到 value，不能拿到 keycode")]),t._v(" "),a("h3",{attrs:{id:"_7-js字符串方法-28种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-js字符串方法-28种"}},[t._v("#")]),t._v(" 7. JS字符串方法（28种）")]),t._v(" "),a("p",[t._v("链接："),a("a",{attrs:{href:"https://juejin.cn/post/7010928535053271077#heading-30",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 28个常用字符串方法及使用技巧 - 掘金 (juejin.cn)"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d56c8218f0154011855b78607c7bd3e8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"JS字符串方法.png"}})]),t._v(" "),a("h4",{attrs:{id:"_1-length-获取字符串长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-length-获取字符串长度"}},[t._v("#")]),t._v(" 1.（length）获取字符串长度")]),t._v(" "),a("p",[t._v("​\tJavaScript中的字符串有一个==length属性，该属性可以用来获取字符串的长度：==")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5")]),t._v("\n")])])]),a("p",[t._v("####2.（charAt() | charCodeAt()）获取字符串指定位置的值")]),t._v(" "),a("p",[t._v("charAt( )和charAt( )方法都可以通过索引来获取指定位置的值：")]),t._v(" "),a("ul",[a("li",[t._v("charAt() 方法获取到的是指定位置的字符；")]),t._v(" "),a("li",[t._v("charCodeAt()方法获取的是指定位置字符的Unicode值。")])]),t._v(" "),a("p",[a("strong",[t._v("（1）charAt()")])]),t._v(" "),a("p",[t._v("​\t==charAt() 方法可以返回指定位置的字符==。其语法如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index表示字符在字符串中的索引值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 索引值为1的是：'e',返回结果是字符串的 'e'")]),t._v("\n")])])]),a("p",[t._v("我们知道，字符串也可也通过索引值来直接获取对应字符串，那它和charAt（）有什么区别呢？下面是例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：'e' ")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：'e' ")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：'' ")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：undefined")]),t._v("\n")])])]),a("p",[t._v("​\t可以看到，当index的取值不在str的长度范围内时，str[index]会返回undefined，而charAt(index)会返回空字符串；除此之外，str[index]不兼容ie6-ie8，charAt(index)可以兼容。")]),t._v(" "),a("p",[a("strong",[t._v("（2）charCodeAt( )")])]),t._v(" "),a("p",[a("code",[t._v("charCodeAt()")]),t._v("：==该方法会返回指定索引位置字符的 Unicode 值，返回值是 0 - 65535 之间的整数，表示给定索引处的 UTF-16 代码单元，如果指定位置没有字符，将返回 "),a("strong",[t._v("NaN")]),t._v("：==")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcdefg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "b" --\x3e 98')]),t._v("\n复制代码\n")])])]),a("p",[t._v("通过这个方法，可以获取字符串中指定Unicode编码值范围的字符。比如，数字0～9的Unicode编码范围是: 48～57，可以通过这个方法来筛选字符串中的数字，当然如果你更熟悉正则表达式，会更方便。")]),t._v(" "),a("h4",{attrs:{id:"_3-检查字符串是否包含特定序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-检查字符串是否包含特定序列"}},[t._v("#")]),t._v(" 3.检查字符串是否包含特定序列")]),t._v(" "),a("p",[t._v("这5个方法都可以用来检索一个字符串中是否包含特定的序列。其中前两个方法得到的指定元素的索引值，并且只会返回第一次匹配到的值的位置。后三个方法返回的是布尔值，表示是否匹配到指定的值。")]),t._v(" "),a("p",[a("strong",[t._v("注意：这5个方法都对大小写敏感！")])]),t._v(" "),a("h4",{attrs:{id:"_1-indexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-indexof"}},[t._v("#")]),t._v(" "),a("strong",[t._v("（1）indexOf()")])]),t._v(" "),a("p",[a("code",[t._v("indexOf()")]),t._v("：==查找某个字符，【"),a("strong",[t._v("有则返回第一次匹配到的位置")]),t._v("】，否则返回-1，其语法如下：==")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("searchValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("fromIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//该方法有两个参数：")]),t._v("\nsearchValue：必需，规定需检索的字符串值；\nfromIndex：可选的整数参数，规定在字符串中"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"开始检索的位置"')]),t._v("。它的合法取值是 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 到 string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("。如省略该，则从字符串的首字符开始检索。\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("eg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefgabc'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1 没有找到该字符串")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//9")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-lastindexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-lastindexof"}},[t._v("#")]),t._v(" （2）lastIndexOf( )")]),t._v(" "),a("p",[a("code",[t._v("lastIndexOf()")]),t._v("：==查找某个字符，有则返回 【"),a("strong",[t._v("最后一次匹配到的位置")]),t._v(" 】，否则返回-1==")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcabc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lastIndexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：3")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lastIndexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：-1")]),t._v("\n")])])]),a("p",[t._v("该方法和indexOf()类似，只是查找的顺序不一样，indexOf()是正序查找，lastIndexOf()是逆序查找。")]),t._v(" "),a("h4",{attrs:{id:"_3-includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-includes"}},[t._v("#")]),t._v(" （3）includes（）")]),t._v(" "),a("p",[t._v("​\t"),a("code",[t._v("includes()")]),t._v("：==该方法用于判断字符串  【"),a("strong",[t._v("是否包含指定的子字符串")]),t._v("】  。如果找到匹配的字符串则返回 true，否则返回 false。该方法的语法如下：==")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("searchvalue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//该方法有两个参数：")]),t._v("\nsearchvalue：必需，要查找的字符串；\nstart：可选，设置从"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'那个位置开始查找'")]),t._v("，默认为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("。\n\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("eg")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'o'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：true")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'z'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：false")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：false")]),t._v("\n")])])]),a("p",[t._v("####（4）startsWith()")]),t._v(" "),a("p",[a("code",[t._v("startsWith()")]),t._v("：==该方法用于检测字符串【"),a("strong",[t._v("是否以指定的子字符串开始")]),t._v("】。如果是以指定的子字符串开头返回 true，否则 false。其语法和上面的includes()方法一样。==")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：true")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Helle'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：false")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：true")]),t._v("\n")])])]),a("p",[t._v("####（5）endsWith()")]),t._v(" "),a("p",[a("code",[t._v("endsWith()")]),t._v("：==该方法用来判断当前字符串**【是否是以指定的子字符串结尾**】。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。其语法如下：==")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("searchvalue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n该方法有两个参数：\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" searchvalue：必需，要搜索的子字符串；\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" length： 设置字符串的长度，默认值为原始字符串长度 string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length。\n")])])]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：true")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'llo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：false")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'llo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果:false")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'llo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'可以看到，当第二个参数设置为5时，就会从字符串的前5个字符(不包含第五5个)中进行检索，所以会返回true。'")]),t._v("\n")])])]),a("h4",{attrs:{id:"_4-concat-连接多个字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-concat-连接多个字符串"}},[t._v("#")]),t._v(" 4. (concat)连接多个字符串")]),t._v(" "),a("p",[a("code",[t._v("concat( )")]),t._v("==方法**【用于连接两个或多个字符串】**。该方法不会改变原有字符串，回返回连接两个或多个字符串的新字符串。其语法如下：==")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stringX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("其中参数 string1, string2, ..., stringX 是必须的，他们将被连接为一个字符串的一个或多个字符串对象")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"efg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//输出结果："abcefg"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"efg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hijk"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//输出结果："abcefghijk"')]),t._v("\n")])])]),a("p",[t._v("​\t虽然concat()方法是专门用来拼接字符串的，但是在开发中使用最多的还是加操作符+，因为其更加简单。")]),t._v(" "),a("p",[t._v("####5. （split）字符串分割成数组")]),t._v(" "),a("p",[t._v("split() 方法用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。其语法如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("separator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("该方法有两个参数：")]),t._v(" "),a("p",[t._v("separator：必需。字符串或正则表达式，从该参数指定的地方分割string")]),t._v(" "),a("p",[t._v("limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcdef"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出结果：["ab", "def"]')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出结果：['a', 'b', 'c', 'd'] ")]),t._v("\n")])])]),a("h3",{attrs:{id:"_8-高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-高阶函数"}},[t._v("#")]),t._v(" 8. "),a("strong",[t._v("高阶函数")])]),t._v(" "),a("p",[t._v("定义："),a("code",[t._v("高阶函数")]),t._v("英文叫 "),a("code",[t._v("Higher-order function")]),t._v("。高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者返回它们。简单总结为高阶函数是"),a("code",[t._v("一个接收函数作为参数")]),t._v("或者将"),a("code",[t._v("函数作为返回输出")]),t._v("的函数。")]),t._v(" "),a("p",[t._v("####8.1 Array.prototype.map")]),t._v(" "),a("p",[a("code",[t._v("map()")]),t._v("(映射)方法最后生成一个新数组，不改变原始数组的值。其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("传递给 "),a("code",[t._v("map")]),t._v(" 的回调函数（"),a("code",[t._v("callback")]),t._v("）接受三个参数，分别是"),a("code",[t._v("currentValue")]),t._v("——正在遍历的元素、"),a("code",[t._v("index")]),t._v("（可选）——元素索引、array（可选）——原数组本身，除了 "),a("code",[t._v("callback")]),t._v(" 之外还可以接受 this 值（可选），用于执行 "),a("code",[t._v("callback")]),t._v(" 函数时使用的this 值。")]),t._v(" "),a("p",[t._v("=="),a("strong",[t._v("不使用高阶函数")]),t._v("==")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//没用map方法写的 求1-4的和")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0,2,4,6,8]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0,1,2,3,4]")]),t._v("\n")])])]),a("p",[t._v("=="),a("strong",[t._v("使用高阶函数")]),t._v("==")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsolo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0,2,4,6,8]")]),t._v("\nconsolo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[0,1,2,3,4,6,]")]),t._v("\n")])])]),a("p",[a("strong",[t._v("==用map 没有initialValue值的时候==")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("accumulator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" accumulator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//initalValue为0的时候 里面的回调函数会执行5次，如果没有initialValue的时候，回调函数只用执行4次，因为把第一个参数作为初始值进行运算")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [0, 1, 2, 3, 4]")]),t._v("\n")])])]),a("p",[t._v("####8.2 Array.prototype.filter")]),t._v(" "),a("p",[a("code",[t._v("filter")]),t._v("(过滤，筛选) 方法创建一个新数组,原始数组不发生改变。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);